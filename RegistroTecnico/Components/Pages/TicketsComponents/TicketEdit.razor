@page "/Ticket/Edit/{TicketId:int}"
@inject TecnicoService tecnicosService
@inject ClienteService clientesService
@inject TicketService ticketservice
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@inject IToastService itoastservice

<PageTitle>Ticket Edit</PageTitle>
<EditForm Model="Ticket" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header text-center">
				<h5 class="card-title">Registro de Tickets</h5>
			</div>

			<div class="card-body">
				<div class="mb-3">
					<label class="form-label"><strong>Ticket Id</strong></label>
					<InputNumber class="form-control" @bind-Value="Ticket.TicketId" readonly></InputNumber>
				</div>

				<div class="mb-3">
					<div class="mb-3">
						<label class="form-label"><strong>Prioridad</strong></label>
						<InputSelect class="form-control" @bind-Value="Ticket.Prioridad">
							<option value=0 selected disabled>Seleccione una prioridad</option>
							<option value="Baja">Baja</option>
							<option value="Media">Media</option>
							<option value="Alta">Alta</option>
							<option value="Critica">Critica</option>
						</InputSelect>
						<ValidationMessage For="(() => Ticket.Prioridad)" />
					</div>
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Asunto</strong></label>
					<InputText class="form-control" @bind-Value="Ticket.Asunto"></InputText>
					<ValidationMessage For="(() => Ticket.Asunto)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Descripción</strong></label>
					<textarea class="form-control" @bind="Ticket.Descripcion" rows="5" placeholder="Describa el problema en detalle..."></textarea>
					<ValidationMessage For="(() => Ticket.Descripcion)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Tiempo Invertido</strong></label>
					<InputNumber class="form-control" @bind-Value="Ticket.TiempoInvertido"></InputNumber>
					<ValidationMessage For="(() => Ticket.TiempoInvertido)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Técnico Encargado</strong></label>

					<div class="input-group">
						<InputSelect class="form-control form-select" @bind-Value="Ticket.TecnicoId">
							<option value=0 selected disabled>Seleccione el Técnico Encargado</option>
							@foreach (var tecnico in ListaTecnicos)
							{
								<option value="@tecnico.TecnicoId">@tecnico.TecnicoNombre</option>
							}
						</InputSelect>
						<ValidationMessage For="(() => Ticket.TecnicoId)" />
					</div>
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Cliente</strong></label>

					<div class="input-group">
						<InputSelect class="form-control form-select" @bind-Value="Ticket.ClienteId">
							<option value=0 selected disabled>Seleccione al Cliente correspondiente</option>
							@foreach (var cliente in ListaClientes)
							{
								<option value="@cliente.ClienteId">@cliente.ClienteNombre</option>
							}
						</InputSelect>
						<ValidationMessage For="(() => Ticket.ClienteId)" />
					</div>
				</div>
			</div>

			<div class="card-footer text-center mt-2">
				<div class="btn-group" role="group">
					<a type="button" href="/Cliente/Eliminar/@Ticket.TicketId" class="btn btn-outline-danger"><span class="bi bi-trash"></span>Eliminar</a>
					<button type="submit" class="btn btn-outline-success"><span class="bi bi-floppy"></span> Guardar</button>
					<a href="/Ticket/Index" class="btn btn-outline-secondary"><span class="bi bi-arrow-left"></span>Volver</a>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {

	[Parameter]
	public int TicketId { get; set; }
	private Tickets Ticket { get; set; } = new Tickets();
	public List<Tecnicos> ListaTecnicos { get; set; } = [];
	public List<Clientes> ListaClientes { get; set; } = [];

	protected override async Task OnInitializedAsync()
	{
		Ticket = await ticketservice.BuscarTicket(TicketId);
		ListaTecnicos = await tecnicosService.Listar(t => t.TecnicoId > 0);
		ListaClientes = await clientesService.Listar(c => c.ClienteId > 0);
	}

	public async Task Guardar()
	{
		var guardo = await ticketservice.Guardar(this.Ticket);
		if (guardo != null)
		{
			itoastservice.ShowSuccess("Ticket Modificado Correctamente");
			navigationManager.NavigateTo("/Ticket/Index");
		}
		else
		{
			itoastservice.ShowError("Error al modificar el Registro");
		}
	}
}