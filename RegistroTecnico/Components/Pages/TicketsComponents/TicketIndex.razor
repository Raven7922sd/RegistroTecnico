@page "/Ticket/Index"
@using System.Linq.Expressions
@using RegistroTecnico.Components.Models.Paginacion
@inject TecnicoService tecnicoservice
@inject ClienteService clienteservice
@inject TicketService ticketservice
@inject NavigationManager navigationmanager
@rendermode InteractiveServer

<PageTitle>Ticket Index</PageTitle>

<div class="container">
	<div class="card shadow-lg">
		<div class="card-header position-relative text-center">
			<h4 class="card-title">Consulta de Tickets</h4>
		</div>

		<div class="card-body">
			<div class="d-flex justify-content-between align-items-center mb-5">
				<h5 class="card-title mb-0">Filtros de B&uacute;squeda</h5>
				<a href="/Ticket/Create" class="btn btn-success">
					<span class="bi bi-plus-square"></span> Crear
				</a>
			</div>

			<div class="row g-3 align-items-end mb-4">

				<div class="col-md-3">
					<label class="form-label"><strong>Filtrar por</strong></label>
					<InputSelect class="form-select" @bind-Value="Filtro">
						<option value="" disabled selected>Seleccione una opción</option>
						<option value="TicketId">Ticket Id</option>
						<option value="ClienteNombre">Cliente</option>
						<option value="TecnicoNombre">T&eacute;cnico</option>
						<option value="Asunto">Asunto</option>
						<option value="Descripcion">Descripci&oacute;n</option>
						<option value="Baja">Baja</option>
						<option value="Media">Media</option>
						<option value="Alta">Alta</option>
						<option value="Critica">Cr&iacute;tica</option>
					</InputSelect>
				</div>

				<div class="col-md-3">
					<label class="form-label"><strong>Desde</strong></label>
					<div class="input-group">
						<span class="input-group-text bi bi-calendar-date"></span>
						<input type="date" @bind="FechaDesde" class="form-control" />
					</div>
				</div>

				<div class="col-md-3">
					<label class="form-label"><strong>Hasta</strong></label>
					<div class="input-group">
						<span class="input-group-text bi bi-calendar-date-fill"></span>
						<input type="date" @bind="FechaHasta" class="form-control" />
					</div>
				</div>

				<div class="col-md-3">
					<label class="form-label"><strong>Buscador</strong></label>
					<div class="input-group">
						<input class="form-control" @bind="ValorFiltro" placeholder="Buscar..." />
						<button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>

					</div>

				</div>
				<div class="col-md-3">
					<div class="col-md-3">
						<button class="btn btn-outline-primary" @onclick="Restablecer">Restablecer</button>
					</div>
				</div>
			</div>

			<div class="table-responsive">
				<table class="table table-hover">
					<thead>
						<tr>
							<th>Ticket Id</th>
							<th>Cliente</th>
							<th>Asunto</th>
							<th>Prioridad</th>
							<th>Descripción</th>
							<th>Técnico Encargado</th>
							<th>Fecha</th>
							<th>Editar</th>
						</tr>
					</thead>
					<tbody>
						@if (ResultadoPaginado != null)
						{
							foreach (var ticket in ResultadoPaginado.Items)
							{
								<tr>
									<td>@ticket.TicketId</td>
									<td>@ticket.Cliente?.ClienteNombre</td>
									<td>@ticket.Asunto</td>
									<td>@ticket.Prioridad</td>
									<td>@ticket.Descripcion</td>
									<td>@ticket.Tecnico?.TecnicoNombre</td>
									<td>@ticket.Fecha.ToString("dd/MM/yyyy")</td>
									<td>
										<a href="Ticket/Edit/@ticket.TicketId" class="btn btn-outline-primary bi bi-pencil-square"></a>
									</td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>

			@if (ResultadoPaginado != null && ResultadoPaginado.TotalPaginas > 1)
			{
				<nav aria-label="Paginación">
					<ul class="pagination justify-content-center mt-4">
						<li class="page-item @(ResultadoPaginado.TienePaginaAnterior ? "" : "disabled")">
							<button class="page-link" @onclick="() => CambiarPagina(PaginaActual - 1)">Anterior</button>
						</li>

						@for (int i = 1; i <= ResultadoPaginado.TotalPaginas; i++)
						{
							<li class="page-item @(i == PaginaActual ? "active" : "")">
								<button class="page-link" @onclick="() => CambiarPagina(i)">@i</button>
							</li>
						}

						<li class="page-item @(ResultadoPaginado.TienePaginaSiguiente ? "" : "disabled")">
							<button class="page-link" @onclick="() => CambiarPagina(PaginaActual + 1)">Siguiente</button>
						</li>
					</ul>
				</nav>
			}
		</div>
	</div>
</div>

@code {
	private PaginacionResultado<Tickets> ResultadoPaginado { get; set; }
	private int PaginaActual { get; set; } = 1;
	private const int TamañoPagina = 5;

	public string Filtro { get; set; } = string.Empty;
	public string ValorFiltro { get; set; } = string.Empty;
	public DateTime? FechaDesde { get; set; }
	public DateTime? FechaHasta { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await CargarPagina(PaginaActual);
	}

	private async Task Buscar()
	{
		PaginaActual = 1;
		await CargarPagina(PaginaActual);
	}

	private async Task Restablecer()
	{
		Filtro = string.Empty;
		ValorFiltro = string.Empty;
		FechaDesde = null;
		FechaHasta = null;
		PaginaActual = 1;

		await CargarPagina(PaginaActual);
	}

	private async Task CargarPagina(int pagina)
	{
		ResultadoPaginado = await ticketservice.BuscarTicketsAsync(
		Filtro, ValorFiltro, FechaDesde, FechaHasta, pagina, TamañoPagina);
		PaginaActual = pagina;
	}

	private async Task CambiarPagina(int nuevaPagina)
	{
		if (nuevaPagina >= 1 && nuevaPagina <= ResultadoPaginado.TotalPaginas)
		{
			await CargarPagina(nuevaPagina);
		}
	}
}
