@page "/Ventas/Edit/{VentaId:int}"
@inject SistemaService sistemaService
@inject ClienteService clienteservice
@inject VentasService ventaService
@inject NavigationManager navigationmanager
@inject IToastService itoastservice
@rendermode InteractiveServer

<PageTitle>Editar Venta</PageTitle>

<EditForm Model="ventas" OnValidSubmit="ActualizarVenta">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header">
				<h4 class="card-title text-center">Editar Venta</h4>
			</div>

			<div class="card-body">
				<div class="mb-3">
					<label class="form-label"><strong>Venta Id</strong></label>
					<InputNumber class="form-control" @bind-Value="ventas.VentaId" readonly />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Cliente</strong></label>
					<InputSelect class="form-select" @bind-Value="ventas.ClienteId">
						<option value=0 disabled>Seleccione un cliente</option>
						@foreach (var cliente in ListaClientes)
						{
							<option value="@cliente.ClienteId">@cliente.ClienteId - @cliente.ClienteNombre</option>
						}
					</InputSelect>
					<ValidationMessage For="(() => ventas.ClienteId)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Fecha</strong></label>
					<InputDate class="form-control" @bind-Value="ventas.Fecha" />
				</div>

				<div class="border border-success p-3 mt-3">
					<h5 class="text-center">Detalles de la Venta</h5>
					<VentasPicker sistemas="ListaSistemas"
								  SistemaId="DetalleSeleccionado.SistemaId"
								  Valor="DetalleSeleccionado.ValorCobrado"
								  OnSistemaSelected="HandleSistemaSelected" />
					<hr />
					<table class="table table-light">
						<thead class="table table-striped">
							<tr class="text-center">
								<th>Sistema</th>
								<th>Coste</th>
								<th>Remover</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var detalle in ventas.VentasDetalles)
							{
								<tr>
									<td>@detalle.SistemaId</td>
									<td>@detalle.ValorCobrado.ToString("N2")</td>
									<td>
										<button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="() => RemoverDetalle(detalle)"></button>
									</td>
								</tr>
							}
						</tbody>
					</table>
					<hr />
				</div>
			</div>

			<div class="card-footer text-center">
				<div class="btn-group">
					<a class="btn btn-outline-secondary" href="/Ventas/Index">
						<span class="bi bi-box-arrow-left"></span> Volver
					</a>
					<button type="submit" class="btn btn-outline-success bi bi-pencil-square"> Actualizar</button>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter] public int VentaId { get; set; }
	private Ventas ventas = new();
	private VentasDetalles DetalleSeleccionado = new();
	public List<Sistemas> ListaSistemas = [];
	public List<Clientes> ListaClientes = [];

	protected override async Task OnInitializedAsync()
	{
		ventas = await ventaService.BuscarVentas(VentaId) ?? new Ventas();
		ListaSistemas = await sistemaService.ListarSistemas(s => s.SistemaId > 0);
		ListaClientes = await clienteservice.Listar(c => c.ClienteId > 0);
	}

	private async Task HandleSistemaSelected((Sistemas sistema, double valor) selection)
	{
		var detalle = new VentasDetalles
			{
				SistemaId = selection.sistema.SistemaId,
				ValorCobrado = selection.valor
			};

		ventas.VentasDetalles.Add(detalle);
		detalle.Monto = ventas.VentasDetalles.Sum(d => d.ValorCobrado);
		DetalleSeleccionado = new VentasDetalles();
		await Task.CompletedTask;
	}

	private async Task ActualizarVenta()
	{
		bool actualizado = await ventaService.Guardar(ventas);
		if (actualizado)
		{
			itoastservice.ShowSuccess("Venta actualizada correctamente");
			navigationmanager.NavigateTo("/Ventas/Index");
		}
		else
		{
			itoastservice.ShowError("Error al actualizar la venta");
		}
	}

	private void RemoverDetalle(VentasDetalles detalle)
	{
		ventas.VentasDetalles.Remove(detalle);
		DetalleSeleccionado = new VentasDetalles();
	}
}